// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }

        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int result, shiftedX, shiftedBit, bit, i;

        let result = 0;
        let shiftedX = x;
        let shiftedBit = 1;
        
        while(i < 16){
            let bit = y & shiftedBit;

            if(bit = shiftedBit){
                let result = result + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let shiftedBit = shiftedBit + shiftedBit;
            let i = i + 1;
        }

        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result, sign;

        let sign = 1;

        if(x < 0){
            let x = -x;
            let sign = -sign;
        }

        if(y < 0){
            let y = -y;
            let sign = -sign;
        }

        if(y > x){
            return 0;
        }

        let q = x / (y + y);
        
        if( (x - (2 * q * y)) < y ){
            let result = q + q;
        }else{
            let result = q + q + 1;
        }

        return result * sign;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int start, end, mid, squared, result;
        
        let start = 1;
        let end = 181;

        if( (x = 0) | (x = 1) ){
            return x;
        }

        while( ~(start > end) ){
            let mid = (start + end) / 2;
            let squared = (mid * mid);

            if(squared = x){
                return mid;
            }

            if(squared < x){
                let result = mid;
                let start = mid + 1;
            }else{
                let end = mid - 1;
            }
        }

        return result;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }

        return b;
    }
}
