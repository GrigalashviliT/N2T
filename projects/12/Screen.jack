// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenAddr, screenEnd;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screenAddr = 16384;
        let screenEnd = 24576;
        let color = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = screenAddr;

        while(i < screenEnd){
            do Memory.poke(i, 0);
        }

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, rem, bin, value;

        let addr = screenAddr + (32 * y) + (x/16);
        let value = Memory.peek(addr);

        let rem = x & 15;
        let bin = 1;

        while( rem > 0 ){
            let bin = bin + bin;

            let rem = rem - 1;
        }

        if(color){
            let value = value | bin;
        }else{
            let value = value & (~bin);
        }

        do Memory.poke(addr, value);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, temp;

        if(x2 < x1){
            let temp = x2;
            let x2 = x1;
            let x1 = temp;

            let temp = y2;
            let y2 = y1;
            let y1 = temp;
        }

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;

        if(dy = 0){
            while( ~(a > dx) ){
                do Screen.drawPixel(x1 + a, y1);

                let a = a + 1;
            }

            return;
        }

        if(dx = 0){
            if(y2 < y1){
                let temp = y2;
                let y2 = y1;
                let y1 = temp;
            }

            let dy = y2 - y1;

            while( ~(b > dy) ){
                do Screen.drawPixel(x1, y1 + b);

                let b = b + 1;
            }

            return;
        }

        if(y2 < y1){
            while( (~(a > dx)) & (~(b < dy)) ){
                do Screen.drawPixel(x1 + a, y1 + b);

                if(diff < 0){
                    let b = b - 1;
                    let diff = diff + dx;
                }else{
                    let a = a + 1;
                    let diff = diff + dy;
                }
            }
        }else{
            while( (~(a > dx)) & (~(b > dy)) ){
                do Screen.drawPixel(x1 + a, y1 + b);

                if(diff < 0){
                    let b = b + 1;
                    let diff = diff + dx;
                }else{
                    let a = a + 1;
                    let diff = diff - dy;
                }
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int i;

        let i = 0;

        while( ~(x1 + i > x2) ){
            do Screen.drawLine(x1 + i, y1, x1 + i, y2);

            let i = i + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = r;

        while( dy > (-r) ){
            do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);

            let dy = dy - 1;
        }

        return;
    }
}
